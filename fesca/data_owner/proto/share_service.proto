syntax = "proto3";

package share_service;

// Service for sending table shares to computing nodes
service ShareService {
    // Send table shares to a computing node
    rpc SendTableShares(SendTableSharesRequest) returns (SendTableSharesResponse);
}

// Request message for sending table shares
message SendTableSharesRequest {
    // Data owner information
    DataOwnerInfo data_owner = 1;
    
    // Table schema information
    TableSchema schema = 2;
    
    // The actual share data for this computing node (binary encoded)
    BinaryPartyData party_data = 3;
}

// Response message for sending table shares
message SendTableSharesResponse {
    bool success = 1;
    string message = 2;
    string storage_path = 3; // Path where the shares were stored
}

// Data owner identification
message DataOwnerInfo {
    string owner_id = 1;
    string owner_name = 2;
}

// Table schema definition
message TableSchema {
    string table_name = 1;
    uint32 table_id = 2;
    repeated ColumnDescriptor columns = 3;
    uint32 row_count = 4;
}

// Column descriptor
message ColumnDescriptor {
    string name = 1;
    ColumnType type_hint = 2;
}

// Column type definition
message ColumnType {
    oneof type {
        BooleanType boolean = 1;
        UnsignedIntType unsigned_int = 2;
        FloatType float = 3;
        StringType string = 4;
    }
}

message BooleanType {}

message UnsignedIntType {}

message FloatType {}

message StringType {
    uint32 max_chars = 1;
    Charset charset = 2;
}

// Character set definition
message Charset {
    oneof charset {
        AsciiCharset ascii = 1;
        Utf8Charset utf8 = 2;
    }
}

message AsciiCharset {}
message Utf8Charset {}

// Binary representation of party data optimized for storage
message BinaryPartyData {
    uint32 party_id = 1;
    uint32 table_id = 2;
    
    // Binary encoded rows where each row contains 2 bitstrings for this party
    // Each bitstring represents the party's shares for all columns in that row
    repeated BinaryRow rows = 3;
}

// Binary representation of a row for a specific party
message BinaryRow {
    // Two bitstrings for this party (each party gets 2 out of 3 bitstrings)
    bytes bitstring_a = 1;  // First bitstring for this party
    bytes bitstring_b = 2;  // Second bitstring for this party
    
    // Offset information to help parse individual columns within the bitstrings
    repeated uint32 column_bit_offsets = 3;  // Starting bit position for each column
    repeated uint32 column_bit_lengths = 4;  // Bit length for each column
} 