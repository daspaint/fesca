syntax = "proto3";

package share_service;

// Service for sending table shares to computing nodes
service ShareService {
    // Send table shares to a computing node
    rpc SendTableShares(SendTableSharesRequest) returns (SendTableSharesResponse);
}

// Request message for sending table shares
message SendTableSharesRequest {
    // Data owner information
    DataOwnerInfo data_owner = 1;
    
    // Table schema information
    TableSchema schema = 2;
    
    // The actual share data for this computing node
    SharedPartyData party_data = 3;
}

// Response message for sending table shares
message SendTableSharesResponse {
    bool success = 1;
    string message = 2;
    string storage_path = 3; // Path where the shares were stored
}

// Data owner identification
message DataOwnerInfo {
    string owner_id = 1;
    string owner_name = 2;
    int64 timestamp = 3; // Unix timestamp when shares were created
}

// Table schema definition
message TableSchema {
    string table_name = 1;
    uint32 table_id = 2;
    repeated ColumnDescriptor columns = 3;
    uint32 row_count = 4;
}

// Column descriptor
message ColumnDescriptor {
    string name = 1;
    ColumnType type_hint = 2;
}

// Column type definition
message ColumnType {
    oneof type {
        BooleanType boolean = 1;
        UnsignedIntType unsigned_int = 2;
        FloatType float = 3;
        StringType string = 4;
    }
}

message BooleanType {}

message UnsignedIntType {}

message FloatType {
    uint32 bit_width = 1;
}

message StringType {
    uint32 max_chars = 1;
    Charset charset = 2;
}

// Character set definition
message Charset {
    oneof charset {
        AsciiCharset ascii = 1;
        Utf8Charset utf8 = 2;
        CustomCharset custom = 3;
    }
}

message AsciiCharset {}
message Utf8Charset {}
message CustomCharset {
    uint32 bits_per_char = 1;
}

// Shared party data
message SharedPartyData {
    uint32 party_id = 1;
    uint32 table_id = 2;
    repeated SharedRow rows = 3;
}

// Shared row
message SharedRow {
    repeated SharedBitString entries = 1;
}

// Shared bit string
message SharedBitString {
    repeated BitShare bits = 1;
}

// Bit share
message BitShare {
    bool share_a = 1;
    bool share_b = 2;
} 